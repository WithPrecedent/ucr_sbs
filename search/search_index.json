{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"UCR SBS","text":"Version Status Documentation Tools Compatibility Stats"},{"location":"#what-is-ucr-sbs","title":"What is UCR SBS?","text":"<p>[TODO: Brief summary of the project]</p>"},{"location":"#why-use-ucr-sbs","title":"Why use UCR SBS?","text":"<p>[TODO: Features and reasons to use the project (and, possibly, not to use it)]</p>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#requirements","title":"Requirements","text":"<p>[TODO: List any OS or other restrictions and pre-installation dependencies]</p>"},{"location":"#installation","title":"Installation","text":"<p>To install <code>UCR SBS</code>, use <code>pip</code>:</p> <pre><code>pip install ucr_sbs\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>[TODO: Describe common use cases, with possible example(s)]</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributors are always welcome. Feel free to grab an issue to work on or make a suggested improvement. If you wish to contribute, please read the Contribution Guide and Code of Conduct.</p>"},{"location":"#similar-projects","title":"Similar Projects","text":"<p>[TODO: If they exist, it is always nice to acknowledge other similar efforts]</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>[TODO: Mention any people or organizations that warrant a special acknowledgment]</p>"},{"location":"#license","title":"License","text":"<p>Use of this repository is authorized under the Apache Software License 2.0.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#010","title":"0.1.0","text":"<pre><code>Initial Commit\n</code></pre>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting any of the following people:</p> <ul> <li>Corey Rayburn Yung (coreyrayburnyung@gmail.com)</li> </ul> <p>All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome and greatly appreciated! Every little bit helps, and credit will always be given. Environment Setup</p>"},{"location":"contributing/#development","title":"Development","text":"<p>Follow this basic process:</p> <ol> <li>Fork and clone the repositor.</li> <li>Create a new branch: <code>git checkout -b feature-or-bugfix-name</code>.</li> <li>Edit the code.</li> <li>If you added functionality or features, update the documentation accordingly.</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"contributing/#style-guidelines","title":"Style Guidelines","text":"<p>This package follows the Google Python Style Guide with two notable exceptions:</p> <ol> <li>It always adds spaces around \"=\". This not only violates the Google guide, it violates PEP8, the foundational Python style guide from which all other resources are derived. I defy this strong, long-standign norm because I find it more readable. My brain and eyes have trouble seeing two separate objects when an equal sign is in the middle. I imagine that I am not alone in this accessibility issue. Further, as PEP8 itself notes, required spaces around equal signs are becoming increasing common with type annotations becoming part of best practices (and, as a result, signatures to classes, functions, and methods regularly include spaces around the equal signs). I realize that this will seem alien to many coders, but it is far easier on my eyes.</li> <li>I use some so-called \"power features\", primarily dunder methods, to make my interfaces easier to access and use. This is disfavored in the Google Python Style Guide because such code is often more difficult for others to read. To address that concern, I try to document and comment as to what the code is doing whenever I used any of the \"power features\" of Python.</li> </ol>"},{"location":"credits/","title":"Credits","text":"<p><p>These projects were used to build ucr_sbs. Thank you!</p> <p><code>python</code> | <code>pdm</code></p> </p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>contourpy</code> Python library for calculating contours of 2D quadrilateral grids <code>&gt;=1.0.1</code> <code>1.3.1</code> BSD License <code>cycler</code> Composable style cycles <code>&gt;=0.10</code> <code>0.12.1</code> BSD License <code>fonttools</code> Tools to manipulate font files <code>&gt;=4.22.0</code> <code>4.55.0</code> MIT <code>joblib</code> Lightweight pipelining with Python functions <code>&gt;=1.2.0</code> <code>1.4.2</code> BSD 3-Clause <code>kiwisolver</code> A fast implementation of the Cassowary constraint solver <code>&gt;=1.3.1</code> <code>1.4.7</code> BSD License <code>matplotlib</code> Python plotting package <code>!=3.6.1,&gt;=3.4</code> <code>3.9.2</code> Python Software Foundation License <code>numpy</code> Fundamental package for array computing in Python <code>2.1.3</code> BSD License <code>packaging</code> Core utilities for Python packages <code>&gt;=20.0</code> <code>24.2</code> BSD License <code>pandas</code> Powerful data structures for data analysis, time series, and statistics <code>2.2.3</code> BSD License <code>pillow</code> Python Imaging Library (Fork) <code>&gt;=8</code> <code>11.0.0</code> MIT-CMU <code>pyparsing</code> pyparsing module - Classes and methods to define and execute parsing grammars <code>&gt;=2.3.1</code> <code>3.2.0</code> MIT License <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.2</code> <code>2.9.0.post0</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2020.1</code> <code>2024.2</code> MIT <code>scikit-learn</code> A set of python modules for machine learning and data mining <code>1.6.0</code> BSD License <code>scipy</code> Fundamental algorithms for scientific computing in Python <code>&gt;=1.6.0</code> <code>1.15.0</code> BSD License <code>seaborn</code> Statistical data visualization <code>0.13.2</code> BSD License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>threadpoolctl</code> threadpoolctl <code>&gt;=3.1.0</code> <code>3.5.0</code> BSD-3-Clause <code>tzdata</code> Provider of IANA time zone data <code>&gt;=2022.7</code> <code>2024.2</code> Apache-2.0"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.16.0</code> BSD-3-Clause <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2024.8.30</code> MPL-2.0 <code>cfgv</code> Validate configuration and produce human readable error messages. <code>&gt;=2.0.0</code> <code>3.4.0</code> MIT <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.4.0</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>&gt;=0.4; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>7.6.8</code> Apache-2.0 <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>distlib</code> Distribution utilities <code>&lt;1,&gt;=0.3.7</code> <code>0.3.9</code> PSF-2.0 <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.2.2</code> ? <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT License <code>filelock</code> A platform independent file lock. <code>&lt;4,&gt;=3.12.2</code> <code>3.16.1</code> The Unlicense (Unlicense) <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.11</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.43</code> BSD-3-Clause <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.49</code> <code>1.5.1</code> ISC <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>identify</code> File identification library for Python <code>&gt;=1.0.0</code> <code>2.6.3</code> MIT <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.10</code> BSD License <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.4</code> BSD License <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&gt;=3.3.3</code> <code>3.7</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>0.4.0</code> MIT License <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>1.9.3</code> ISC <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1</code> <code>3.0.2</code> BSD License <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>1.6.1</code> BSD License <code>mkdocs-autorefs</code> Automatically link across pages in MkDocs. <code>&gt;=1.2</code> <code>1.2.0</code> ISC <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>1.1.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>0.5.0</code> MIT License <code>mkdocs-get-deps</code> MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of GitHub or GitLab committers and other useful GIT info such as last modified date <code>2.4.1</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>0.6.1</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>9.5.46</code> MIT <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>0.8.0</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]</code> <code>0.27.0</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.12.2</code> ISC <code>nodeenv</code> Node.js virtual environment builder <code>&gt;=0.11.1</code> <code>1.9.1</code> BSD <code>packaging</code> Core utilities for Python packages <code>&gt;=20.5</code> <code>24.2</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.6</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2,&gt;=1.5</code> <code>1.5.0</code> MIT <code>pre-commit</code> A framework for managing and maintaining multi-language pre-commit hooks. <code>4.0.1</code> MIT <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.18.0</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.12</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>8.3.3</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>6.0.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>3.16.0</code> MIT License <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>3.6.1</code> MIT License <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2015.7; python_version &lt; \"3.9\"</code> <code>2024.2</code> MIT <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2024.11.6</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.32.3</code> Apache-2.0 <code>ruff</code> An extremely fast Python linter and code formatter, written in Rust. <code>0.8.0</code> MIT <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.1</code> BSD <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>; python_full_version &lt;= \"3.11.0a6\"</code> <code>2.1.0</code> ? <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.2.3</code> MIT License <code>virtualenv</code> Virtual Python Environment builder <code>&gt;=20.10.0</code> <code>20.28.0</code> MIT <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0"},{"location":"license/","title":"License","text":"<p>Apache Software License 2.0</p> <p>Copyright \u00a9 2024, Corey Rayburn Yung</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> ucr_sbs<ul> <li> core</li> <li> munge</li> <li> options</li> <li> sources</li> <li> visualize</li> </ul> </li> </ul>"},{"location":"reference/ucr_sbs/","title":"Index","text":"<p>Tools for processing, analyzing, and visualizing UCR SBS data</p>"},{"location":"reference/ucr_sbs/core/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> core","text":"<p>Loads data from disk</p>"},{"location":"reference/ucr_sbs/core/#ucr_sbs.core.Source","title":"<code>Source(data=dict())</code>  <code>dataclass</code>","text":"<p>               Bases: <code>ABC</code></p> <p>summary</p>"},{"location":"reference/ucr_sbs/core/#ucr_sbs.core.Source.maximum","title":"<code>maximum: int</code>  <code>property</code>","text":"<p>summary</p> <p>Returns:</p> Name Type Description <code>_type_</code> <code>int</code> <p>description</p>"},{"location":"reference/ucr_sbs/core/#ucr_sbs.core.Source.minimum","title":"<code>minimum: int</code>  <code>property</code>","text":"<p>summary</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>description</p>"},{"location":"reference/ucr_sbs/core/#ucr_sbs.core.Source.visuals","title":"<code>visuals: list[str] = []</code>  <code>class-attribute</code>","text":"<p>Properties</p>"},{"location":"reference/ucr_sbs/core/#ucr_sbs.core.Source.clean","title":"<code>clean(data)</code>  <code>abstractmethod</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>description</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: description</p> Source code in <code>src/ucr_sbs/core.py</code> <pre><code>@abc.abstractmethod\ndef clean(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        data (pd.DataFrame): _description_\n\n    Returns:\n        pd.DataFrame: _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/ucr_sbs/core/#ucr_sbs.core.Source.load","title":"<code>load()</code>  <code>abstractmethod</code>","text":"<p>summary</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: description</p> Source code in <code>src/ucr_sbs/core.py</code> <pre><code>@abc.abstractmethod\ndef load(self) -&gt; pd.DataFrame:\n    \"\"\"_summary_\n\n    Returns:\n        pd.DataFrame: _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/ucr_sbs/core/#ucr_sbs.core.Source.munge","title":"<code>munge(data)</code>  <code>abstractmethod</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>description</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: description</p> Source code in <code>src/ucr_sbs/core.py</code> <pre><code>@abc.abstractmethod\ndef munge(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        data (pd.DataFrame): _description_\n\n    Returns:\n        pd.DataFrame: _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/ucr_sbs/core/#ucr_sbs.core.Source.visualize","title":"<code>visualize(data)</code>  <code>abstractmethod</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>description</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: description</p> Source code in <code>src/ucr_sbs/core.py</code> <pre><code>@abc.abstractmethod\ndef visualize(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        data (pd.DataFrame): _description_\n\n    Returns:\n        pd.DataFrame: _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/ucr_sbs/core/#ucr_sbs.core.load_data","title":"<code>load_data(path)</code>","text":"<p>load_data</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>description</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>description</p> Source code in <code>src/ucr_sbs/core.py</code> <pre><code>def load_data(path: pathlib.Path) -&gt; pd.DataFrame:\n    \"\"\"load_data\n\n    Args:\n        path: _description_\n\n    Returns:\n        _description_\n\n    \"\"\"\n    df = pd.read_csv(path)\n    df.columns = list(options.violent_crime_labels.values())\n    df = df.drop('Caveats', axis = 1)\n    return df\n</code></pre>"},{"location":"reference/ucr_sbs/munge/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> munge","text":"<p>Cleans and organizes data</p>"},{"location":"reference/ucr_sbs/munge/#ucr_sbs.munge.add_missing_rape_data","title":"<code>add_missing_rape_data(df, total)</code>","text":"<p>add_missing_data summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required <code>total</code> <code>DataFrame</code> <p>description</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>description</p> Source code in <code>src/ucr_sbs/munge.py</code> <pre><code>def add_missing_rape_data(df: pd.DataFrame, total: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"add_missing_data _summary_\n\n    Args:\n        df: _description_\n        total: _description_\n\n    Returns:\n        _description_\n    \"\"\"\n    ratio = get_rape_original_to_revised_ratio(total)\n    return df.apply(impute_missing_rape_data, axis = 1, ratio = ratio)\n</code></pre>"},{"location":"reference/ucr_sbs/munge/#ucr_sbs.munge.drop_before_start_date","title":"<code>drop_before_start_date(df)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: description</p> Source code in <code>src/ucr_sbs/munge.py</code> <pre><code>def drop_before_start_date(df: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        df (pd.DataFrame): _description_\n\n    Returns:\n        pd.DataFrame: _description_\n    \"\"\"\n    return df[df['Year'] &gt;= options.start_year]\n</code></pre>"},{"location":"reference/ucr_sbs/munge/#ucr_sbs.munge.get_rape_original_to_revised_ratio","title":"<code>get_rape_original_to_revised_ratio(df)</code>","text":"<p>get_rape_original_to_revised_ratio summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required <p>Returns:</p> Type Description <code>float</code> <p>description</p> Source code in <code>src/ucr_sbs/munge.py</code> <pre><code>def get_rape_original_to_revised_ratio(df: pd. DataFrame) -&gt; float:\n    \"\"\"get_rape_original_to_revised_ratio _summary_\n\n    Args:\n        df: _description_\n\n    Returns:\n        _description_\n    \"\"\"\n    revised = df.loc[\n        df['Rape (revised) Rate'].notna() &amp; df['Rape (original) Rate'].notna(),\n        'Rape (revised) Rate'].mean()\n    original = df.loc[\n        df['Rape (original) Rate'].notna() &amp; df['Rape (revised) Rate'].notna(),\n        'Rape (original) Rate'].mean()\n    return original/revised\n</code></pre>"},{"location":"reference/ucr_sbs/munge/#ucr_sbs.munge.get_rate_df","title":"<code>get_rate_df(df, columns)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required <code>columns</code> <code>str | list[str]</code> <p>description</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: description</p> Source code in <code>src/ucr_sbs/munge.py</code> <pre><code>def get_rate_df(df: pd.DataFrame, columns: str | list[str]) -&gt; pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        df (pd.DataFrame): _description_\n        columns: _description_\n\n    Returns:\n        pd.DataFrame: _description_\n    \"\"\"\n    if isinstance(columns, str):\n        offenses = getattr(options, columns)\n        columns = ['Year']\n        rate_offenses = [' '.join([c, options.rate_suffix]) for c in offenses]\n        columns.extend(rate_offenses)\n    return df[columns].set_index('Year')\n</code></pre>"},{"location":"reference/ucr_sbs/munge/#ucr_sbs.munge.get_state_normalized_df","title":"<code>get_state_normalized_df(df, columns)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required <code>columns</code> <code>str | list[str]</code> <p>description</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: description</p> Source code in <code>src/ucr_sbs/munge.py</code> <pre><code>def get_state_normalized_df(\n    df: pd.DataFrame,\n    columns: str | list[str]) -&gt; pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        df (pd.DataFrame): _description_\n        columns: _description_\n\n    Returns:\n        pd.DataFrame: _description_\n    \"\"\"\n    if isinstance(columns, str):\n        offenses = getattr(options, columns)\n        columns = ['Year', 'State Name']\n        normal_offenses = [\n            ' '.join([c, options.normalized_suffix]) for c in offenses]\n        columns.extend(normal_offenses)\n    return df[columns].set_index(['Year', 'State Name'])\n</code></pre>"},{"location":"reference/ucr_sbs/munge/#ucr_sbs.munge.get_state_rate_df","title":"<code>get_state_rate_df(df, columns)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required <code>columns</code> <code>str | list[str]</code> <p>description</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: description</p> Source code in <code>src/ucr_sbs/munge.py</code> <pre><code>def get_state_rate_df(\n    df: pd.DataFrame,\n    columns: str | list[str]) -&gt; pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        df (pd.DataFrame): _description_\n        columns: _description_\n\n    Returns:\n        pd.DataFrame: _description_\n    \"\"\"\n    if isinstance(columns, str):\n        offenses = getattr(options, columns)\n        columns = ['Year', 'State Name']\n        rate_offenses = [' '.join([c, options.rate_suffix]) for c in offenses]\n        columns.extend(rate_offenses)\n    return df[columns].set_index(['Year', 'State Name'])\n</code></pre>"},{"location":"reference/ucr_sbs/munge/#ucr_sbs.munge.impute_missing_rape_data","title":"<code>impute_missing_rape_data(row, ratio)</code>","text":"<p>impute_missing_rape_data summary</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>Series</code> <p>description</p> required <code>ratio</code> <code>float</code> <p>description</p> required <p>Returns:</p> Type Description <code>Series</code> <p>description</p> Source code in <code>src/ucr_sbs/munge.py</code> <pre><code>def impute_missing_rape_data(row: pd.Series, ratio: float) -&gt; pd.Series:\n    \"\"\"impute_missing_rape_data _summary_\n\n    Args:\n        row: _description_\n        ratio: _description_\n\n    Returns:\n        _description_\n    \"\"\"\n    if row['Rape (revised) Rate'] and pd.isna(row['Rape (original) Rate']):\n        row['Rape (original) Rate'] = ratio * row['Rape (revised) Rate']\n    elif pd.isna(row['Rape (revised) Rate']) and row['Rape (original) Rate']:\n        row['Rape (revised) Rate'] = row['Rape (original) Rate'] / ratio\n    return row\n</code></pre>"},{"location":"reference/ucr_sbs/options/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> options","text":"<p>General settings for UCR data files.</p>"},{"location":"reference/ucr_sbs/sources/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> sources","text":"<p>Visualizes data and analysis.</p>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources.ASR","title":"<code>ASR(data=dict())</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Source</code></p> <p>summary</p>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources.LEOKA","title":"<code>LEOKA(data=dict())</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Source</code></p> <p>summary</p>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources.OKCA","title":"<code>OKCA(data=dict())</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Source</code></p> <p>summary</p>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources.SRS","title":"<code>SRS(data=dict(), splits=lambda: ['raw', 'cleaned', 'total', 'states', 'normalized_states']())</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Source</code></p> <p>summary</p>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources.SRS.clean","title":"<code>clean()</code>","text":"<p>summary</p> Source code in <code>src/ucr_sbs/sources.py</code> <pre><code>def clean(self):\n    \"\"\"_summary_\"\"\"\n    self.data['cleaned'] = copy.deepcopy(self.data['raw'])\n    self.data['cleaned'].columns = list(self.column_names.values())\n    self.data['cleaned'] = self.data['cleaned'].drop('Caveats', axis = 1)\n    for column, column_type in self.column_types.items():\n        if column_type is int:\n            self.data['cleaned'][column] = self.data['cleaned'][column].replace(',', '', regex = True)\n            self.data['cleaned'][column] = pd.to_numeric(self.data['cleaned'][column], errors = 'coerce', downcast = 'integer')\n    self.data['cleaned'] = self.data['cleaned'].apply(_add_missing_state_name, axis = 1)\n    self.data['cleaned']['State Name'] = self.data['cleaned']['State Name'].apply(lambda x: x.strip())\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources.SRS.load","title":"<code>load(files=None)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>files</code> <code>str | None</code> <p>description. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>pd.DataFrame: description</p> Source code in <code>src/ucr_sbs/sources.py</code> <pre><code>def load(self, files: str | None = None) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        files (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        pd.DataFrame: _description_\n\n    \"\"\"\n    pd.options.mode.chained_assignment = None\n    files = files or self.files\n    path = options.data_path / files\n    self.data['raw'] = pd.read_csv(path)\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources.SRS.munge","title":"<code>munge()</code>","text":"<p>summary</p> Source code in <code>src/ucr_sbs/sources.py</code> <pre><code>def munge(self) -&gt; None:\n    \"\"\"_summary_\"\"\"\n    offense_columns = list(options.offenses.keys())\n    offense_columns.extend(list(options.totals.keys()))\n    rate_columns = [\n        ' '.join([x, options.rate_suffix]) for x in offense_columns]\n    for dataset in ['Total', 'States']:\n        for column in offense_columns:\n            self.data[dataset] = _add_rate_column(\n                self.data[dataset],\n                column)\n        for column in rate_columns:\n            self.data[dataset] = _add_normalized_column(\n                self.data[dataset],\n                column)\n        ratio = _get_rape_original_to_revised_ratio(self.data['Total'])\n        self.data[dataset] = self.data[dataset].apply(\n            _impute_rape_data,\n            axis = 1,\n            ratio = ratio)\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources.SRS.split","title":"<code>split()</code>","text":"<p>summary</p> Source code in <code>src/ucr_sbs/sources.py</code> <pre><code>def split(self) -&gt; None:\n    \"\"\"_summary_\"\"\"\n    self.data['Total'] = self.data['cleaned'][self.data['cleaned']['State'] == 'US']\n    self.data['Total'].set_index(['Year'])\n    self.data['States'] = self.data['cleaned'].drop(self.data['cleaned'][self.data['cleaned']['State'] == 'US'].index)\n    self.data['States'].set_index(['Year', 'State Name'])\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources.SRS.visualize","title":"<code>visualize(dataset, crimes='all', rape_stats='original', stat_type='rates')</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>str</code> <p>description</p> required <code>crimes</code> <code>str | list[str]</code> <p>description. Defaults to 'all'.</p> <code>'all'</code> <code>rape_stats</code> <code>str</code> <p>description. Defaults to 'original'.</p> <code>'original'</code> <code>stat_type</code> <code>str</code> <p>description. Defaults to 'rates'.</p> <code>'rates'</code> Source code in <code>src/ucr_sbs/sources.py</code> <pre><code>def visualize(\n    self,\n    dataset: str,\n    crimes: str | list[str] = 'all',\n    rape_stats: str = 'original',\n    stat_type: str = 'rates') -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        dataset (str): _description_\n        crimes (str | list[str], optional): _description_. Defaults to 'all'.\n        rape_stats (str, optional): _description_. Defaults to 'original'.\n        stat_type (str, optional): _description_. Defaults to 'rates'.\n    \"\"\"\n    visualize.plot_time_series(\n        data = self.data[dataset],\n        crimes = crimes,\n        rape_stats = rape_stats,\n        stat_type = stat_type)\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources._add_missing_state_name","title":"<code>_add_missing_state_name(row)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>Series</code> <p>description</p> required Source code in <code>src/ucr_sbs/sources.py</code> <pre><code>def _add_missing_state_name(row: pd.Series) -&gt; pd.Series:\n    \"\"\"_summary_\n\n    Args:\n        row: _description_\n\n    \"\"\"\n    if row['State'] is np.nan:\n        row['State'] = 'US'\n        row['State Name'] = 'United States'\n    elif row['State Name'] is np.nan:\n        row['State Name'] = options.state_abbreviations[row['State']]\n    return row\n</code></pre>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources._add_normalized_column","title":"<code>_add_normalized_column(df, rate_column, normalized_suffix=options.normalized_suffix)</code>","text":"<p>add_normalized_column</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required <code>rate_column</code> <code>str</code> <p>description</p> required <code>normalized_suffix</code> <code>str</code> <p>description. Defaults to 'Rate'.</p> <code>normalized_suffix</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>description</p> Source code in <code>src/ucr_sbs/sources.py</code> <pre><code>def _add_normalized_column(\n    df: pd.DataFrame,\n    rate_column: str,\n    normalized_suffix: str = options.normalized_suffix) -&gt; pd.DataFrame:\n    \"\"\"add_normalized_column\n\n    Args:\n        df: _description_\n        rate_column: _description_\n        normalized_suffix: _description_. Defaults to 'Rate'.\n\n    Returns:\n        _description_\n\n    \"\"\"\n    minimum = df[rate_column].min()\n    maximum = df[rate_column].max()\n    normalized_column_name = ' '.join([rate_column, normalized_suffix])\n    df[normalized_column_name] = (df[rate_column] - minimum)/(maximum - minimum)\n    return df\n</code></pre>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources._add_rate_column","title":"<code>_add_rate_column(data, count_column, rate_suffix=options.rate_suffix)</code>","text":"<p>add_rate_column</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>description</p> required <code>count_column</code> <code>str</code> <p>description</p> required <code>rate_suffix</code> <code>str</code> <p>description. Defaults to 'Rate'.</p> <code>rate_suffix</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>description</p> Source code in <code>src/ucr_sbs/sources.py</code> <pre><code>def _add_rate_column(\n    data: pd.DataFrame,\n    count_column: str,\n    rate_suffix: str = options.rate_suffix) -&gt; pd.DataFrame:\n    \"\"\"add_rate_column\n\n    Args:\n        data: _description_\n        count_column: _description_\n        rate_suffix: _description_. Defaults to 'Rate'.\n\n    Returns:\n        _description_\n    \"\"\"\n    rate_column_name = ' '.join([count_column, rate_suffix])\n    data[rate_column_name] = data[count_column]/data['Population']*100000\n    return data\n</code></pre>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources._get_rape_original_to_revised_ratio","title":"<code>_get_rape_original_to_revised_ratio(df)</code>","text":"<p>get_rape_original_to_revised_ratio summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required <p>Returns:</p> Type Description <code>float</code> <p>description</p> Source code in <code>src/ucr_sbs/sources.py</code> <pre><code>def _get_rape_original_to_revised_ratio(df: pd. DataFrame) -&gt; float:\n    \"\"\"get_rape_original_to_revised_ratio _summary_\n\n    Args:\n        df: _description_\n\n    Returns:\n        _description_\n    \"\"\"\n    revised = df.loc[\n        df['Rape (revised) Rate'].notna() &amp; df['Rape (original) Rate'].notna(),\n        'Rape (revised) Rate'].mean()\n    original = df.loc[\n        df['Rape (original) Rate'].notna() &amp; df['Rape (revised) Rate'].notna(),\n        'Rape (original) Rate'].mean()\n    return original/revised\n</code></pre>"},{"location":"reference/ucr_sbs/sources/#ucr_sbs.sources._impute_rape_data","title":"<code>_impute_rape_data(row, ratio)</code>","text":"<p>impute_missing_rape_data summary</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>Series</code> <p>description</p> required <code>ratio</code> <code>float</code> <p>description</p> required <p>Returns:</p> Type Description <code>Series</code> <p>description</p> Source code in <code>src/ucr_sbs/sources.py</code> <pre><code>def _impute_rape_data(row: pd.Series, ratio: float) -&gt; pd.Series:\n    \"\"\"impute_missing_rape_data _summary_\n\n    Args:\n        row: _description_\n        ratio: _description_\n\n    Returns:\n        _description_\n    \"\"\"\n    if row['Rape (revised) Rate'] and pd.isna(row['Rape (original) Rate']):\n        row['Rape (original) Rate'] = ratio * row['Rape (revised) Rate']\n    elif pd.isna(row['Rape (revised) Rate']) and row['Rape (original) Rate']:\n        row['Rape (revised) Rate'] = row['Rape (original) Rate'] / ratio\n    return row\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> visualize","text":"<p>Visualizes data and analysis.</p>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize._get_data_subset","title":"<code>_get_data_subset(data, crimes='all', rape_stats='original', stat_type='rates')</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>description</p> required <code>crimes</code> <code>str | list[str]</code> <p>description</p> <code>'all'</code> <code>rape_stats</code> <code>str</code> <p>description. Defaults to 'original'.</p> <code>'original'</code> <code>stat_type</code> <code>str</code> <p>description. Defaults to 'rates'.</p> <code>'rates'</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: description</p> Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def _get_data_subset(\n    data: pd.DataFrame,\n    crimes: str | list[str] = 'all',\n    rape_stats: str = 'original',\n    stat_type: str = 'rates') -&gt; list[str]:\n    \"\"\"_summary_\n\n    Args:\n        data (pd.DataFrame): _description_\n        crimes (str | list[str]): _description_\n        rape_stats (str, optional): _description_. Defaults to 'original'.\n        stat_type (str, optional): _description_. Defaults to 'rates'.\n\n    Returns:\n        list[str]: _description_\n    \"\"\"\n    columns = ['Year']\n    if isinstance(crimes, str):\n        if crimes == 'violent':\n            offenses = [\n                k for k, v in options.offenses.items() if v == 'violent']\n        elif crimes == 'property':\n            offenses = [\n                k for k, v in options.offenses.items() if v == 'property']\n        elif crimes == 'all':\n            offenses = list(options.offenses.keys())\n        if rape_stats == 'original' and crimes != 'property':\n            offenses.remove('Rape (revised)')\n        elif rape_stats == 'revised' and crimes != 'property':\n            offenses.remove('Rape (original)')\n    print('test columns', data.columns)\n    if stat_type == 'counts':\n        columns.extend(offenses)\n    elif stat_type == 'rates':\n        rate_offenses = [' '.join([c, options.rate_suffix]) for c in offenses]\n        columns.extend(rate_offenses)\n    elif stat_type == 'normalized':\n        normalized_offenses = [' '.join([c, options.rate_suffix, options.normalized_suffix]) for c in offenses]\n        columns.extend(normalized_offenses)\n    return data[columns].set_index(['Year'])\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize._get_ylabel","title":"<code>_get_ylabel(stat_type)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>stat_type</code> <code>str</code> <p>description</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>description</p> Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def _get_ylabel(stat_type: str) -&gt; str:\n    \"\"\"_summary_\n\n    Args:\n        stat_type (str): _description_\n\n    Returns:\n        str: _description_\n    \"\"\"\n    if stat_type == 'rates':\n        return 'Reported Crime Rate per 100,000 People'\n    elif stat_type == 'normalized':\n        return 'Normalized Reported Crime Rate'\n    elif stat_type == 'counts':\n        return 'Number of Reported Crimes'\n    raise ValueError(f'{stat_type} is not a valid crime stat type')\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize.plot_aggregate_property_crime_rate","title":"<code>plot_aggregate_property_crime_rate(df)</code>","text":"<p>plot_aggregate_crime_rate summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def plot_aggregate_property_crime_rate(df: pd.DataFrame) -&gt; None:\n    \"\"\"plot_aggregate_crime_rate _summary_\n\n    Args:\n        df: _description_\n\n    \"\"\"\n    rate_df = munge.get_rate_df(\n        df,\n        columns = ['Year', 'Total Property Crime Rate'])\n    visual = sns.lineplot(data = rate_df, legend = 'brief')\n    visual.set(xlabel = 'Year', ylabel = 'Crime Rate per 100,000 People')\n    plt.xticks(\n        np.arange(min(df['Year']), max(df['Year'] + 1), 1),\n        rotation = 45)\n    visual.set_ylim(0)\n    sns.despine()\n    sns.move_legend(visual, 'center left', bbox_to_anchor = (1, .5))\n    plt.show()\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize.plot_aggregate_violent_crime_rate","title":"<code>plot_aggregate_violent_crime_rate(df)</code>","text":"<p>plot_aggregate_crime_rate summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def plot_aggregate_violent_crime_rate(df: pd.DataFrame) -&gt; None:\n    \"\"\"plot_aggregate_crime_rate _summary_\n\n    Args:\n        df: _description_\n\n    \"\"\"\n    rate_df = munge.get_rate_df(\n        df,\n        columns = ['Year', 'Total Violent Crime Rate'])\n    visual = sns.lineplot(data = rate_df, legend = 'brief')\n    visual.set(xlabel = 'Year', ylabel = 'Crime Rate per 100,000 People')\n    plt.xticks(\n        np.arange(min(df['Year']), max(df['Year'] + 1), 1),\n        rotation = 45)\n    visual.set_ylim(0)\n    sns.despine()\n    sns.move_legend(visual, 'center left', bbox_to_anchor = (1, .5))\n    plt.show()\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize.plot_boxplot_state_crime_rate","title":"<code>plot_boxplot_state_crime_rate(df, offenses, year)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required <code>offenses</code> <code>list[str]</code> <p>description</p> required <code>year</code> <code>int</code> <p>description</p> required Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def plot_boxplot_state_crime_rate(\n    df: pd.DataFrame,\n    offenses: list[str],\n    year: int) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        df (pd.DataFrame): _description_\n        offenses (list[str]): _description_\n        year (int): _description_\n    \"\"\"\n    df = df[df['Year'] == year]\n    columns = [' '.join([x, options.rate_suffix]) for x in offenses]\n    df = df[columns]\n    visual = sns.violinplot(data = df)\n    visual.set(xlabel = 'Crime', ylabel = 'Crime Rate per 100,000 People')\n    sns.despine()\n    plt.show()\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize.plot_normalized_swarmplot_state_rates","title":"<code>plot_normalized_swarmplot_state_rates(df, offenses, year)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required <code>offenses</code> <code>list[str]</code> <p>description</p> required <code>year</code> <code>int</code> <p>description</p> required Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def plot_normalized_swarmplot_state_rates(\n    df: pd.DataFrame,\n    offenses: list[str],\n    year: int) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        df (pd.DataFrame): _description_\n        offenses (list[str]): _description_\n        year (int): _description_\n    \"\"\"\n    df = df[df['Year'] == year]\n    df = munge.add_normalized_columns(df)\n    columns = [\n        ' '.join([x, options.rate_suffix, options.normalized_suffix])\n        for x in offenses]\n    df = df[columns]\n    visual = sns.swarmplot(data = df, native_scale = True, orient = 'h')\n    visual.set(xlabel = 'Normalized Crime Rate')\n    visual.set_yticklabels(offenses)\n    visual.xaxis.set_major_formatter(mpl.ticker.PercentFormatter(1))\n    sns.despine()\n    plt.show()\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize.plot_normalized_violinplot_state_rates","title":"<code>plot_normalized_violinplot_state_rates(df, offenses, year)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required <code>offenses</code> <code>list[str]</code> <p>description</p> required <code>year</code> <code>int</code> <p>description</p> required Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def plot_normalized_violinplot_state_rates(\n    df: pd.DataFrame,\n    offenses: list[str],\n    year: int) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        df (pd.DataFrame): _description_\n        offenses (list[str]): _description_\n        year (int): _description_\n    \"\"\"\n    df = df[df['Year'] == year]\n    df = munge.add_normalized_columns(df)\n    columns = [\n        ' '.join([x, options.rate_suffix, options.normalized_suffix])\n        for x in offenses]\n    df = df[columns]\n    visual = sns.violinplot(data = df, cut = 0, native_scale = True, orient = 'h')\n    visual.set(xlabel = 'Normalized Crime Rate')\n    visual.set_yticklabels(offenses)\n    visual.xaxis.set_major_formatter(mpl.ticker.PercentFormatter(1))\n    sns.despine()\n    plt.show()\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize.plot_state_rate_percent_change_original","title":"<code>plot_state_rate_percent_change_original(df, offense)</code>","text":"<p>plot_total_rate_time_series summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required <code>offense</code> <code>str</code> <p>s</p> required Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def plot_state_rate_percent_change_original(\n    df: pd.DataFrame,\n    offense: str) -&gt; None:\n    \"\"\"plot_total_rate_time_series _summary_\n\n    Args:\n        df: _description_\n        offense: s\n\n    \"\"\"\n    rate_column = ' '.join([offense, options.rate_suffix])\n    columns = ['Year', 'State Name', rate_column]\n    rate_df = munge.get_state_rate_df(df, columns = columns)\n    percent_change_df = rate_df.pct_change()\n    visual = sns.relplot(\n        data = percent_change_df,\n        x = 'Year',\n        y = rate_column,\n        col = 'State Name',\n        kind = 'line',\n        height = 1,\n        col_wrap = 5,\n        aspect = 2)\n    visual.set_titles(col_template = '{col_name}')\n    visual.set_axis_labels(\n        x_var = 'Year',\n        y_var = '% Change',\n        clear_inner = True)\n    plt.show()\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize.plot_state_rate_time_series_original","title":"<code>plot_state_rate_time_series_original(df, offense)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required <code>offense</code> <code>str</code> <p>s</p> required Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def plot_state_rate_time_series_original(df: pd.DataFrame, offense: str) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        df (pd.DataFrame): _description_\n        offense: s\n\n    \"\"\"\n    rate_column = ' '.join([offense, options.rate_suffix])\n    columns = ['Year', 'State Name', rate_column]\n    rate_df = munge.get_state_rate_df(df, columns = columns)\n    visual = sns.relplot(\n        data = rate_df,\n        x = 'Year',\n        y = rate_column,\n        col = 'State Name',\n        kind = 'line',\n        height = 1,\n        col_wrap = 5,\n        aspect = 2)\n    visual.set_titles(col_template = '{col_name}')\n    visual.set_axis_labels(\n        x_var = 'Year',\n        y_var = 'Crime Rate',\n        clear_inner = True)\n    plt.show()\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize.plot_time_series","title":"<code>plot_time_series(data, crimes='all', rape_stats='original', stat_type='rates')</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>description</p> required <code>crimes</code> <code>str | list[str]</code> <p>description. Defaults to 'all'.</p> <code>'all'</code> <code>rape_stats</code> <code>str</code> <p>description. Defaults to 'original'.</p> <code>'original'</code> <code>stat_type</code> <code>str</code> <p>description. Defaults to 'rates'.</p> <code>'rates'</code> Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def plot_time_series(\n    data: pd.DataFrame,\n    crimes: str | list[str] = 'all',\n    rape_stats: str = 'original',\n    stat_type: str = 'rates') -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        data (pd.DataFrame): _description_\n        crimes (str | list[str], optional): _description_. Defaults to 'all'.\n        rape_stats (str, optional): _description_. Defaults to 'original'.\n        stat_type (str, optional): _description_. Defaults to 'rates'.\n    \"\"\"\n    data_subset = _get_data_subset(data, crimes, rape_stats, stat_type)\n    ylabel = _get_ylabel(stat_type)\n    visual = sns.lineplot(data = data_subset)\n    visual.set(xlabel = 'Year', ylabel = ylabel)\n    plt.xticks(\n        np.arange(min(data['Year']), max(data['Year'] + 1), 1),\n        rotation = 45)\n    visual.set_ylim(0)\n    sns.despine()\n    sns.move_legend(visual, 'center left', bbox_to_anchor = (1, .5))\n    plt.show()\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize.plot_total_rate_percent_change_original","title":"<code>plot_total_rate_percent_change_original(df)</code>","text":"<p>plot_total_rate_time_series summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def plot_total_rate_percent_change_original(df: pd.DataFrame) -&gt; None:\n    \"\"\"plot_total_rate_time_series _summary_\n\n    Args:\n        df: _description_\n    \"\"\"\n    rate_df = munge.get_rate_df(df, columns = 'original_offenses')\n    percent_change_df = rate_df.pct_change()\n    visual = sns.lineplot(data = percent_change_df, legend = 'brief')\n    visual.set(\n        xlabel = 'Year',\n        ylabel = '% Change in Crime Rate from Previous Year')\n    plt.xticks(\n        np.arange(min(df['Year']), max(df['Year'] + 1), 1),\n        rotation = 45)\n    sns.despine()\n    sns.move_legend(visual, 'center left', bbox_to_anchor = (1, .5))\n    plt.show()\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize.plot_total_rate_percent_change_revised","title":"<code>plot_total_rate_percent_change_revised(df)</code>","text":"<p>plot_total_rate_time_series summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def plot_total_rate_percent_change_revised(df: pd.DataFrame) -&gt; None:\n    \"\"\"plot_total_rate_time_series _summary_\n\n    Args:\n        df: _description_\n    \"\"\"\n    rate_df = munge.get_rate_df(df, columns = 'revised_offenses')\n    percent_change_df = rate_df.pct_change()\n    visual = sns.lineplot(data = percent_change_df, legend = 'brief')\n    visual.set(\n        xlabel = 'Year',\n        ylabel = '% Change in Crime Rate from Previous Year')\n    plt.xticks(\n        np.arange(min(df['Year']), max(df['Year'] + 1), 1),\n        rotation = 45)\n    sns.despine()\n    sns.move_legend(visual, 'center left', bbox_to_anchor = (1, .5))\n    plt.show()\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize.plot_total_rate_time_series_original","title":"<code>plot_total_rate_time_series_original(df)</code>","text":"<p>plot_total_rate_time_series summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def plot_total_rate_time_series_original(df: pd.DataFrame) -&gt; None:\n    \"\"\"plot_total_rate_time_series _summary_\n\n    Args:\n        df: _description_\n    \"\"\"\n    rate_df = munge.get_rate_df(df, columns = 'original_offenses')\n    visual = sns.lineplot(data = rate_df)\n    visual.set(xlabel = 'Year', ylabel = 'Crime Rate per 100,000 People')\n    plt.xticks(\n        np.arange(min(df['Year']), max(df['Year'] + 1), 1),\n        rotation = 45)\n    visual.set_ylim(0)\n    sns.despine()\n    sns.move_legend(visual, 'center left', bbox_to_anchor = (1, .5))\n    plt.show()\n    return\n</code></pre>"},{"location":"reference/ucr_sbs/visualize/#ucr_sbs.visualize.plot_total_rate_time_series_revised","title":"<code>plot_total_rate_time_series_revised(df)</code>","text":"<p>plot_total_rate_time_series summary</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>description</p> required Source code in <code>src/ucr_sbs/visualize.py</code> <pre><code>def plot_total_rate_time_series_revised(df: pd.DataFrame) -&gt; None:\n    \"\"\"plot_total_rate_time_series _summary_\n\n    Args:\n        df: _description_\n    \"\"\"\n    rate_df = munge.get_rate_df(df, columns = 'revised_offenses')\n    visual = sns.lineplot(data = rate_df)\n    visual.set(xlabel = 'Year', ylabel = 'Crime Rate per 100,000 People')\n    plt.xticks(\n        np.arange(min(df['Year']), max(df['Year'] + 1), 1),\n        rotation = 45)\n    visual.set_ylim(0)\n    sns.despine()\n    sns.move_legend(visual, 'center left', bbox_to_anchor = (1, .5))\n    plt.show()\n    return\n</code></pre>"}]}